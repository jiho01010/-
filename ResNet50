# 구글 드라이브 마운트
from google.colab import auth
auth.authenticate_user()

from google.colab import drive
drive.mount('/content/drive')

import os
print(os.listdir('/content/drive/MyDrive'))


import torch
from torchvision import datasets, transforms
from torch.utils.data import random_split, DataLoader


data_dir = data_dir = '/content/drive/MyDrive/Garbage classification'

# 1) 데이터 전처리
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

# 2) 데이터셋 불러오기
full_dataset = datasets.ImageFolder(data_dir, transform=transform)

train_size = int(0.8 * len(full_dataset))
val_size = len(full_dataset) - train_size

train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

print("클래스 인덱스:", full_dataset.class_to_idx)
print("클래스 이름:", full_dataset.classes)


# 3) Resnet50 모델 불러오기
import torch.nn as nn
from torchvision import models

model = models.resnet50(pretrained=True)
num_classes = len(full_dataset.classes) 
model.fc = nn.Linear(model.fc.in_features, num_classes)



# 4) 손실함수와 최적화 방법 지정
import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)



device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)



# 5) 학습하기
num_epochs = 50  

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    print(f'Epoch {epoch+1}, Loss: {running_loss/len(train_loader):.4f}')



# 6) 검증하기
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for images, labels in val_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
print(f'Validation Accuracy: {100 * correct / total:.2f}%')

